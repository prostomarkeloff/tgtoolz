import enum

I18N_BASE_CODE = """# AUTOGENERATED FILE - DO NOT EDIT MANUALLY (tgtoolz)

from telegrinder.node import scalar_node
from tgtoolz.i18n.constants import Plurality
from typing import Literal

import typing
import random
{GET_LANGUAGE_CODE_NODE_IMPORT}

@scalar_node()
class I18NBase:
    _translations: dict[str, dict[str, dict[str, list[str] | dict[str, dict[str, str]]]]]


    def __init__(self, lang_code: str):
        self.lang_code = lang_code

    def _get(self, _key: str, **kwargs: typing.Any) -> str:
        entry = self._translations.get(_key, {})
        translation = entry.get(self.lang_code)
        assert translation
        for kwarg_name, kwarg_value in kwargs.copy().items():
            if kwarg_name in translation["plural_mapping"]:
                if kwarg_value == "dual" and kwarg_value not in translation["plural_mapping"][kwarg_name]:
                    kwarg_value = "plural"
                kwargs[kwarg_name] = translation["plural_mapping"][kwarg_name][kwarg_value]  # type: ignore
        any_text = random.choice(translation["text"])  # type: ignore
        return any_text.format(**kwargs) if kwargs else any_text  # type: ignore

    @classmethod
    def compose(cls, lang_code: {GET_LANGUAGE_CODE_NODE}) -> typing.Self:
        return cls(lang_code=lang_code)

"""


class Plurality(enum.StrEnum):
    SINGULAR = "singular"
    PLURAL = "plural"
    DUAL = "dual"

    @classmethod
    def determine(cls, count: int) -> "Plurality":
        if count == 2:
            return cls.DUAL
        elif count == 1:
            return cls.SINGULAR
        else:
            return cls.PLURAL
