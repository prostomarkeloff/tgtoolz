import enum

I18N_BASE_CODE = """# AUTOGENERATED FILE - DO NOT EDIT MANUALLY (tgtoolz)

from typing import Literal, TypedDict
import typing
import random

from telegrinder.node import scalar_node
from tgtoolz.i18n.constants import Plurality, Gender

{GET_LANGUAGE_CODE_NODE_IMPORT}

class TranslationData(TypedDict):
    text: list[str]
    plural_mapping: dict[str, dict[str, str]]
    gender_mapping: dict[str, dict[str, str]]


LanguageEntry = dict[str, TranslationData]
Entry = dict[str, LanguageEntry]


@scalar_node
class I18NBase:
    _translations: dict[str, LanguageEntry]

    def __init__(self, lang_code: str):
        self.lang_code = lang_code

    def _get(self, _key: str, **kwargs: Any) -> str:
        entry: LanguageEntry = self._translations.get(_key, {})
        print(1, entry)
        translation: TranslationData = entry.get(
            self.lang_code, {"text": [], "plural_mapping": {}, "gender_mapping": {}}
        )
        print(2, translation)
        if not translation or not translation.get("text"):
            raise ValueError(
                f"Translation for key {_key} not found for language {self.lang_code}"
            )

        for kwarg_name, kwarg_value in kwargs.copy().items():
            if kwarg_name in translation.get("plural_mapping", {}):
                if (
                    kwarg_value == "dual"
                    and kwarg_value not in translation["plural_mapping"][kwarg_name]
                ):
                    kwarg_value = "plural"
                kwargs[kwarg_name] = translation["plural_mapping"][kwarg_name][
                    kwarg_value
                ]
        any_text = random.choice(translation["text"])
        return any_text.format(**kwargs) if kwargs else any_text

    @classmethod
    def compose(cls, lang_code: LanguageCodeFromUserSourceNode) -> typing.Self:
        return cls(lang_code=lang_code)

"""


class Plurality(enum.StrEnum):
    SINGULAR = "singular"
    PLURAL = "plural"
    DUAL = "dual"

    @classmethod
    def determine(cls, count: int) -> "Plurality":
        if count == 2:
            return cls.DUAL
        elif count == 1:
            return cls.SINGULAR
        else:
            return cls.PLURAL


class Gender(enum.StrEnum):
    MALE = "male"
    FEMALE = "female"
    OTHER = "other"
